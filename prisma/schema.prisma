// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  userType      String    // 'child', 'parent', 'educator'
  passwordHash  String
  profile       Profile?
  learningPaths LearningPathProgress[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  age          Int?
  specialNeeds String[]
  interests    String[]
  learningStyle String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LearningPath {
  id          String    @id @default(cuid())
  title       String
  description String
  difficulty  String    // 'beginner', 'intermediate', 'advanced'
  subjects    String[]
  lessons     Lesson[]
  progress    LearningPathProgress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id            String    @id @default(cuid())
  title         String
  description   String
  duration      Int       // in minutes
  type          String    // 'video', 'interactive', 'exercise'
  content       Json
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  progress      LessonProgress[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LearningPathProgress {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  completed     Boolean     @default(false)
  startedAt     DateTime   @default(now())
  completedAt   DateTime?
  
  @@unique([userId, learningPathId])
}

model LessonProgress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed Boolean  @default(false)
  score     Int?
  timeSpent Int      // in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PushSubscription {
  userId    String
  endpoint  String
  auth      String
  p256dh    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, endpoint])
  @@index([userId])
}
